i need to do disconnect of a socket in backend and prob in passing the global variable namebased on this disconnection the dictionary needs to be updated
{% comment %} if (message == "close") {
	websocket.send(message);
	websocket.close();
	break;
} {% endcomment %}

# if(data=="close"):
			# 	websocket.close()
			# 	for index, (server, count) in enumerate(my_dict.items()):
			# 		if(index==server):
			# 			my_dict[server]-=1
			# 	print(my_dict)
			# 	break



one table server name : server portno. availability


like write a function -- that returns a port number and based on thaat direct else make the request sleep for 300 seconds

chk the error might not occur there 

session.pop()
handle_client() function is returning a msg if no availability but it redirects otherwise need to handle that as well

need to handle two parts while making multiple client requests it needs to identify that the server has become available
and while waiting time also it has to identify

app = FastAPI()

templates = Jinja2Templates(directory="templates")
SECRET_KEY = "mysecretkey"
SESSION_COOKIE_NAME = "mycookie"

app.add_middleware(SessionMiddleware, secret_key=SECRET_KEY, session_cookie=SESSION_COOKIE_NAME)

@app.get("/")
async def home(request: Request):
	session = request.session
	session_id = generate_session_id()
	session["session_id"] = session_id
	session["username"]="client#"
	print(session.get("session_id"))

	
Server's user interface should have the following property:
a. Name of the server. Example: Server A, Server B
b. Date and Time.
c. Number of clients attended so far for the day.
d. Number of clients attended so far for the month.
e. Average of ratings provided by client. (This could be ranging from 5 to 1)
f. Total number of clients approached this chat server and total count of lost client.
g. Name of the current client communicating with.





Various threads can communicate with each other using different inter-thread communication mechanisms. These mechanisms facilitate the exchange of data, synchronization of operations, and coordination between threads. Here are some common ways threads can communicate with each other:

1. **Shared Memory:** Threads can communicate by sharing memory regions. They can read from and write to shared variables 
or data structures. However, to ensure thread safety and avoid race conditions, synchronization mechanisms like locks (mutexes), 
semaphores, or atomic operations are needed.

2. **Message Passing:** Threads can communicate through message passing, where one thread sends a message to another. This can be
 implemented using various techniques such as message queues, pipes, sockets, or shared memory with explicit signaling mechanisms 
 like condition variables or events.

3. **Condition Variables:** Threads can use condition variables to wait for a certain condition to become true before proceeding. 
They can signal other threads when the condition is met, allowing them to wake up and continue execution.

4. **Semaphores:** Semaphores are synchronization primitives that can be used to control access to a shared resource. 
They allow threads to acquire or release permits, which can be used to limit concurrent access to shared resources.

5. **Monitors:** Monitors are higher-level synchronization constructs that encapsulate shared data and the operations that can be p
erformed on that data. They provide mutual exclusion and condition synchronization, simplifying the management of concurrent access to shared resources.

6. **Futures and Promises:** In languages that support futures and promises, threads can communicate through asynchronous 
computations. One thread can create a future (promise) representing the result of a computation, while another thread can wait for the future to be resolved and obtain the result.

7. **Barrier Synchronization:** Threads can synchronize at a barrier point, where each thread waits until all threads have reached 
that point before proceeding. Barriers are commonly used for parallel computations where all threads need to synchronize at certain stages of execution.

8. **Event Handling:** Threads can communicate via event-driven mechanisms, where one thread generates events (e.g., user input, 
system events) and other threads register handlers to process these events asynchronously.

The choice of communication mechanism depends on the specific requirements of the application, including the nature of the data 
being exchanged, the level of synchronization required, and the programming language or framework being used. It's important to consider factors like thread safety, performance, and simplicity when designing thread communication in concurrent programs.


Threads play a crucial role in the development of a chat application, particularly in handling concurrent tasks such as receiving messages, sending messages, updating the user interface, and managing network connections. Here's how threads can be used in a chat application:

1. **Network Communication Threads:** Chat applications typically involve communication over a network, such as TCP/IP or WebSocket connections. You can create separate threads to handle network communication tasks, such as listening for incoming messages, sending messages to other users, and managing the socket connections. This separation ensures that the UI remains responsive while the network operations are ongoing.

2. **Message Processing Threads:** Upon receiving a message from the network, a dedicated message processing thread can be used to parse the incoming message, extract relevant information (e.g., sender, message content, timestamp), and update the chat interface accordingly. This thread can also handle tasks like message encryption/decryption, message formatting, and message storage.

3. **UI Update Threads:** In graphical chat applications, a separate UI thread (e.g., the main thread in GUI frameworks like JavaFX or Swing) is responsible for updating the user interface components based on the incoming messages, user actions (e.g., sending messages, joining chat rooms), and other events. It's essential to use mechanisms like event dispatch threads (EDT) to ensure that UI updates are performed safely and efficiently.

4. **Background Tasks Threads:** Apart from network communication and UI updates, chat applications may have background tasks such as periodic status updates, message notifications, or file transfers. These tasks can be executed in separate threads to prevent blocking the main application thread and maintain smooth user experience.

5. **Thread Pool Management:** Instead of creating new threads for every task, a thread pool can be employed to manage and reuse a fixed number of threads. This approach optimizes resource utilization and reduces the overhead of thread creation and destruction. Thread pools are particularly useful for handling concurrent tasks with varying degrees of priority and workload.

6. **Synchronization Threads:** When multiple threads access shared data structures (e.g., chat message queue, user list), synchronization mechanisms such as locks, semaphores, or monitors are used to ensure thread safety and prevent data corruption or race conditions. This is crucial in maintaining the integrity of chat data and preventing concurrency issues.

By leveraging threads effectively in a chat application, developers can achieve efficient concurrency management, improve responsiveness, handle simultaneous user interactions, and provide a seamless chatting experience for users across different platforms and devices.


need to handle client waiting as server is busy
(try a post request)
fork in js
5 minutes waiting time -- try to set using nginx 