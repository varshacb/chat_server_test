<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Dashboard</title>
</head>
<body>
    <h1>Server Dashboard</h1>
    <p>Connected Clients: <span id="connected-clients">Loading...</span></p>
    
    <form id="broadcast-form">
        <label for="message">Broadcast Message:</label><br>
        <input type="text" id="message" name="message"><br>
        <button type="submit">Send Broadcast</button>
    </form>

    <script>
        async function updateConnectedClients() {
            const response = await fetch("/connected_clients");
            const data = await response.json();
            document.getElementById("connected-clients").innerText = data.connected_clients;
        }

        updateConnectedClients();
        
        document.getElementById("broadcast-form").addEventListener("submit", async function(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const message = formData.get("message");
            await fetch("/send_broadcast", {
                method: "POST",
                body: JSON.stringify({ "message": message }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            event.target.reset();
        });
    </script>
</body>
</html>

server side:

from fastapi import FastAPI, WebSocket, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import asyncio

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Store WebSocket connections
connected_clients = set()

# WebSocket route
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    connected_clients.add(websocket)
    try:
        while True:
            # Receive message from client
            data = await websocket.receive_text()
            
            # Convert message to lowercase
            lowercase_data = data.lower()
            
            # Broadcast message to all connected clients
            for client in connected_clients:
                await client.send_text(lowercase_data)
    finally:
        connected_clients.remove(websocket)

# HTTP routes for server dashboard
@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    return templates.TemplateResponse("dashboard.html", {"request": request})

@app.post("/send_broadcast")
async def send_broadcast_message(message: str):
    # Broadcast message to all connected clients
    for client in connected_clients:
        await client.send_text(message)
    return {"message": "Broadcast sent successfully."}

@app.get("/connected_clients")
async def get_connected_clients():
    return {"connected_clients": len(connected_clients)}
